def levenshtein_distance(a: str, b: str):
    """the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions)
       required to change one word into the other. Here we are going to calculate Levenshtein distance between string b and a."""
       
    F = [[i + j if i*j == 0 else 0 for j in range(len(b)+1)] for i in range(len(a)+1)] 

    for i in range(1, len(a)+1):
        for j in range(1, len(b)+1):
            if a[i-1] == b[j-1]:
                F[i][j] = F[i-1][j-1]
            else:
                F[i][j] = 1 + min(F[i-1][j-1], F[i][j-1], F[i-1][j])

    i = len(a)
    j = len(b)
    editing_movements = []
    while i > 0 and j > 0:
        if a[i-1] == b[j-1]:  # если символы одинаковые, перемещаемся по диагонали влево-вверх
            i -= 1
            j -= 1

        elif F[i][j-1] < F[i-1][j] and F[i][j-1] < F[i-1][j-1]:
            editing_movements.append(f"delite {b[j-1]}")
            j -= 1

        elif F[i-1][j] < F[i][j-1] and F[i-1][j] < F[i-1][j-1]:
            editing_movements.append(f"insert {a[i-1]}")
            i -= 1

        elif F[i-1][j-1] < F[i-1][j] and F[i-1][j-1] < F[i][j-1]:
            editing_movements.append(f"replace {b[j-1]} with {a[i-1]}")
            i -= 1
            j -= 1

    return editing_movements[::-1]


print(levenstein_lenght("abc", "kbcdf"))
